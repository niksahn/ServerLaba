version: '3.8'

services:

  zookeeper:
    container_name: servers-zookeeper-1
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    container_name: servers-kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://servers-kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  app:
    build:
      context: ./laba1
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: servers-app-1

    environment:
      MONGO_URL: "mongodb://mongodb:27017"
    networks:
      - app-network
    depends_on:
      - mongodb

  user-service:
    container_name: servers-user-service-1

    build:
      context: ./userService
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    environment:
      MONGO_URL: "mongodb://mongodb:27017"
    networks:
      - app-network
    depends_on:
      - mongodb

  api-gateway:
    container_name: api-gateway

    build:
      context: ./tipaGayTWay
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
    networks:
      - app-network

  authservice:
    container_name: servers-authservice-1
    build: 
      context: ./auth/AuthService
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - mongodb
    networks:
      - app-network

  mongodb:
    container_name: servers-mongodb-1
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  prolog-server:
    build:
      context: ./prolog
      dockerfile: Dockerfile
    container_name: prolog-server
    ports:
      - "8090:8090"
    networks:
      - app-network
    depends_on:
      - redis
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: 6379

  sonarqube:
       container_name: sonarqube
       image: sonarqube:lts
       ports:
         - "9000:9000"
       environment:
         - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - authservice

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_DEFAULT_THEME=light
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
  
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  mongo-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
